
<link rel="stylesheet" href="/stylesheets/portcullis.css" />

<style>

</style>

<!-- <script src="/javascripts/ui/bubble.js"></script> -->
<!--<script src="/javascripts/ui/star_point.js"></script>-->

<svg id="paper" xmlns="http://www.w3.org/2000/svg">
    <defs>
        <linearGradient id="bottom_fade_gradient" x1="0%" y1="0%" x2="0%" y2="100%">
            <stop offset="0.75" stop-color="#fff" stop-opacity="1" />
            <stop offset="1" stop-color="#fff" stop-opacity="0" />
        </linearGradient>
        <mask id="bottom_fade" x="0" y="0" width="100%" height="100%" maskUnits="userSpaceOnUse" >
            <rect x="0" y="0" width="100%" height="100%" fill="url(#bottom_fade_gradient)"  />
        </mask>
        <linearGradient id="list_gradient" x1="0%" y1="100%" x2="100%" y2="0%">
            <stop offset="0" stop-color="#035096" stop-opacity="1" />
            <stop offset="1" stop-color="#035096" stop-opacity="1" />
        </linearGradient>
        <linearGradient id="panel_gradient" x1="0%" y1="100%" x2="100%" y2="0%">
            <stop offset="0" stop-color="#777" stop-opacity="1" />
            <stop offset="0.08" stop-color="#035096" stop-opacity="0.97" />
            <stop offset="0.15" stop-color="#035096" stop-opacity=".75" />
            <stop offset="0.25" stop-color="#035096" stop-opacity=".60" />
            <stop offset="0.75" stop-color="#035096" stop-opacity="0.1" />
            <stop offset="1" stop-color="silver" stop-opacity="0" />
        </linearGradient>


        <filter id="sofGlow" height="300%" width="300%" x="-75%" y="-75%">
            <!-- Thicken out the original shape -->
            <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="thicken" />

            <!-- Use a gaussian blur to create the soft blurriness of the glow -->
            <feGaussianBlur in="thicken" stdDeviation="10" result="blurred" />

            <!-- Change the colour -->
            <feFlood flood-color="#035096" result="glowColor" />

            <!-- Color in the glows -->
            <feComposite in="glowColor" in2="blurred" operator="in" result="softGlow_colored" />

            <!--	Layer the effects together -->
            <feMerge>
                <feMergeNode in="softGlow_colored"/>
                <feMergeNode in="SourceGraphic"/>
            </feMerge>

        </filter>
    </defs>
</svg>

<script>


    var paper = Snap('#paper').attr({preserveAspectRatio:'xMidYMid slice'});
    var width = $('#paper').width();
    var height = $('#paper').height();
    paper.offset_x = (width >= height) ? 0 : (height - width) / 2;
    paper.offset_y = (height > width) ? 0 : (height - width) / 2;
    paper.viewBox_width = (width >= height) ? 10000 : (10000 / height) * width;
    paper.viewBox_height = (height > width) ? 10000 : (10000 / width) * height;

    $(window).resize(function(){
        var width = $('#paper').width();
        var height = $('#paper').height();

        paper.offset_x = (width >= height) ? 0 : (height - width) / -2;
        paper.offset_y = (height > width) ? 0 : (height - width) / -2;
        paper.viewBox_width = (width >= height) ? 10000 : (10000 / height) * width;
        paper.viewBox_height = (height > width) ? 10000 : (10000 / width) * height;

        paper.bounding_box = {
            min: (width >= height) ? paper.viewBox_height : paper.viewBox_width,
            boundary: {
                top_left: {
                    x: paper.offset_x,
                    y: paper.offset_y
                },
                top_right: {
                    x: paper.viewBox_width - paper.offset_x,
                    y: paper.offset_y
                },
                bottom_right: {
                    x: paper.viewBox_width - paper.offset_x,
                    y: paper.viewBox_height - paper.offset_y
                },
                bottom_left: {
                    x: paper.offset_x,
                    y: paper.viewBox_height - paper.offset_y
                }
            },
            center_point: {
                x: paper.viewBox_width / 2,
                y: paper.viewBox_height / 2
            }
        };


        var viewBox_attributes = StringBuilder("%1 %2 %3 %4", paper.offset_x, paper.offset_y, paper.viewBox_width, paper.viewBox_height);

        paper.attr({viewBox: viewBox_attributes});


    }).resize();

    var bigCircle_radius = paper.bounding_box.min / 2.6180339;
    paper.circle(paper.bounding_box.center_point.x, paper.bounding_box.center_point.y, bigCircle_radius).attr({fill: '#035096', 'fill-opacity': 0.3});
    var purple_radius = bigCircle_radius / (1.6180339)/3;
    var purple_origin = { x: paper.bounding_box.center_point.x, y: paper.bounding_box.center_point.y - (bigCircle_radius - purple_radius) };
    paper.circle(purple_origin.x, purple_origin.y, purple_radius).attr({fill: 'purple', 'fill-opacity': 0.6});
    var blue_radius = bigCircle_radius / (1.49442712)/3;
    var blue_origin = { x: paper.bounding_box.center_point.x + (bigCircle_radius - blue_radius) - ((bigCircle_radius - blue_radius) / 3.42), y: paper.bounding_box.center_point.y - (bigCircle_radius - blue_radius) + ((bigCircle_radius - blue_radius) / 3.42)};
    paper.circle(blue_origin.x, blue_origin.y, blue_radius).attr({fill: 'blue', 'fill-opacity': 0.6});
    var green_radius = bigCircle_radius / (1.37082034)/3;
    var green_origin = { x: paper.bounding_box.center_point.x + (bigCircle_radius - green_radius), y: paper.bounding_box.center_point.y};
    paper.circle(green_origin.x, green_origin.y, green_radius).attr({fill: 'green', 'fill-opacity': 0.6});
    var yellow_radius = bigCircle_radius / (1.24721356)/3;
    var yellow_origin = { x: paper.bounding_box.center_point.x + (bigCircle_radius - yellow_radius) - ((bigCircle_radius - yellow_radius) / 3.42), y: paper.bounding_box.center_point.y + (bigCircle_radius - yellow_radius) - ((bigCircle_radius - yellow_radius) / 3.42)};
    paper.circle(yellow_origin.x, yellow_origin.y, yellow_radius).attr({fill: 'yellow', 'fill-opacity': 0.6});
    var orange_radius = bigCircle_radius / (1.12360678)/3;
    var orange_origin = { x: paper.bounding_box.center_point.x, y: paper.bounding_box.center_point.y + (bigCircle_radius - orange_radius)};
    paper.circle(orange_origin.x, orange_origin.y, orange_radius).attr({fill: 'orange', 'fill-opacity': 0.6});
    var red_radius = bigCircle_radius / (1)/3;
    var red_origin = { x: paper.bounding_box.center_point.x - (bigCircle_radius - red_radius) + ((bigCircle_radius - red_radius) / 3.42), y: paper.bounding_box.center_point.y + (bigCircle_radius - red_radius) - ((bigCircle_radius - red_radius) / 3.42)};
    paper.circle(red_origin.x, red_origin.y, red_radius).attr({fill: 'red', 'fill-opacity': 0.6});
    paper.rect(paper.bounding_box.center_point.x - paper.bounding_box.min * 0.42, paper.bounding_box.center_point.y - paper.bounding_box.min * 0.05, paper.bounding_box.min * 0.51, paper.bounding_box.min * 0.05).attr({fill: 'white'});

</script>